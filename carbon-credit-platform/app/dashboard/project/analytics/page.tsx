// app/dashboard/project/analytics/page.tsx
"use client"

import { useEffect, useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { useContract } from "@/hooks/use-contract"
import { useUser } from "@/contexts/user-context"
import { Loader2 } from "lucide-react"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts"
import DashboardWidget from "@/components/dashboard/dashboard-widget"
import { DollarSign, Package } from "lucide-react"

interface RevenueData {
  month: string
  revenue: number
}

interface CreditTypeData {
  name: string
  credits: number
}

export default function RevenueAnalyticsPage() {
  const { getMyProjectDashboard, loading, error } = useContract()
  const { currentAddress } = useUser()
  const [revenueData, setRevenueData] = useState<RevenueData[]>([])
  const [creditTypeData, setCreditTypeData] = useState<CreditTypeData[]>([])
  const [totalRevenue, setTotalRevenue] = useState<number>(0)
  const [totalCreditsMinted, setTotalCreditsMinted] = useState<number>(0)

  useEffect(() => {
    const fetchAnalyticsData = async () => {
      if (currentAddress) {
        const data = await getMyProjectDashboard(currentAddress)
        if (data) {
          // Mock revenue data
          const mockRevenue: RevenueData[] = [
            { month: "Jan", revenue: 15000 },
            { month: "Feb", revenue: 18000 },
            { month: "Mar", revenue: 16000 },
            { month: "Apr", revenue: 20000 },
            { month: "May", revenue: 22000 },
            { month: "Jun", revenue: 25000 },
          ]
          setRevenueData(mockRevenue)
          setTotalRevenue(data.revenueGenerated)
          setTotalCreditsMinted(data.totalCreditsMinted)

          // Mock credit type data
          const mockCreditTypes: CreditTypeData[] = [
            { name: "Forestry", credits: 5000 },
            { name: "Renewable Energy", credits: 7000 },
            { name: "Waste Management", credits: 3000 },
            { name: "Energy Efficiency", credits: 4000 },
          ]
          setCreditTypeData(mockCreditTypes)
        }
      }
    }
    fetchAnalyticsData()
  }, [currentAddress, getMyProjectDashboard])

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Loader2 className="h-10 w-10 animate-spin text-green-500" />
        <p className="ml-4 text-lg">Loading analytics...</p>
      </div>
    )
  }

  if (error) {
    return <div className="text-error text-center py-8">Error: {error}</div>
  }

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-bold">Revenue & Credit Analytics</h2>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <DashboardWidget
          title="Total Revenue"
          value={`$${totalRevenue.toFixed(2)}`}
          description="Total earnings from credit sales"
          icon={DollarSign}
          iconColor="text-green-500"
        />
        <DashboardWidget
          title="Total Credits Minted"
          value={`${totalCreditsMinted} tons`}
          description="Overall credits generated by your projects"
          icon={Package}
          iconColor="text-blue-500"
        />
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Monthly Revenue Trend</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={revenueData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" className="stroke-gray-200 dark:stroke-gray-700" />
                <XAxis dataKey="month" className="text-sm text-gray-600 dark:text-gray-400" />
                <YAxis className="text-sm text-gray-600 dark:text-gray-400" />
                <Tooltip
                  contentStyle={{
                    backgroundColor: "hsl(var(--card))",
                    border: "1px solid hsl(var(--border))",
                    borderRadius: "0.5rem",
                  }}
                  labelStyle={{ color: "hsl(var(--foreground))" }}
                  itemStyle={{ color: "hsl(var(--foreground))" }}
                />
                <Bar dataKey="revenue" fill="#22c55e" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Credits Minted by Project Type</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart data={creditTypeData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" className="stroke-gray-200 dark:stroke-gray-700" />
                <XAxis dataKey="name" className="text-sm text-gray-600 dark:text-gray-400" />
                <YAxis className="text-sm text-gray-600 dark:text-gray-400" />
                <Tooltip
                  contentStyle={{
                    backgroundColor: "hsl(var(--card))",
                    border: "1px solid hsl(var(--border))",
                    borderRadius: "0.5rem",
                  }}
                  labelStyle={{ color: "hsl(var(--foreground))" }}
                  itemStyle={{ color: "hsl(var(--foreground))" }}
                />
                <Bar dataKey="credits" fill="#3b82f6" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
